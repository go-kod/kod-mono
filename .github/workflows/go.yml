name: Build and Test

on:
 push:
   branches:
     - 'main'
 pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: ["stable"]

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: docker-compose
        run: docker-compose -f deployment/docker-compose.yml up -d

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.version }}
          cache: true

      - name: golangci-lint
        if: runner.os != 'Windows'
        uses: golangci/golangci-lint-action@v4.0.0
        with:
          args: "--out-${NO_FUTURE}format colored-line-number --timeout 5m"
      
      - name: golangci-lint
        if: runner.os == 'Windows'
        uses: golangci/golangci-lint-action@v4.0.0
        env:
          nofuture: out-format
        with:
          args: "--%nofuture% colored-line-number --timeout 5m"

      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: generate and test
        run: |
            task github-action

      - uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: ./coverage.out # optional
