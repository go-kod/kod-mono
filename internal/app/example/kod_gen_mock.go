//go:build !ignoreKodGen

// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/example/kod_gen_interface.go
//
// Generated by this command:
//
//	mockgen -source internal/app/example/kod_gen_interface.go -destination internal/app/example/kod_gen_mock.go -package example -typed -build_constraint !ignoreKodGen
//

// Package example is a generated GoMock package.
package example

import (
	context "context"
	reflect "reflect"

	model "github.com/go-kod/kod-mono/api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockGraphService is a mock of GraphService interface.
type MockGraphService struct {
	ctrl     *gomock.Controller
	recorder *MockGraphServiceMockRecorder
	isgomock struct{}
}

// MockGraphServiceMockRecorder is the mock recorder for MockGraphService.
type MockGraphServiceMockRecorder struct {
	mock *MockGraphService
}

// NewMockGraphService creates a new mock instance.
func NewMockGraphService(ctrl *gomock.Controller) *MockGraphService {
	mock := &MockGraphService{ctrl: ctrl}
	mock.recorder = &MockGraphServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphService) EXPECT() *MockGraphServiceMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockGraphService) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", ctx, input)
	ret0, _ := ret[0].(*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockGraphServiceMockRecorder) CreateTodo(ctx, input any) *MockGraphServiceCreateTodoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockGraphService)(nil).CreateTodo), ctx, input)
	return &MockGraphServiceCreateTodoCall{Call: call}
}

// MockGraphServiceCreateTodoCall wrap *gomock.Call
type MockGraphServiceCreateTodoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGraphServiceCreateTodoCall) Return(arg0 *model.Todo, arg1 error) *MockGraphServiceCreateTodoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGraphServiceCreateTodoCall) Do(f func(context.Context, model.NewTodo) (*model.Todo, error)) *MockGraphServiceCreateTodoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGraphServiceCreateTodoCall) DoAndReturn(f func(context.Context, model.NewTodo) (*model.Todo, error)) *MockGraphServiceCreateTodoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Todos mocks base method.
func (m *MockGraphService) Todos(ctx context.Context) ([]*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Todos", ctx)
	ret0, _ := ret[0].([]*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Todos indicates an expected call of Todos.
func (mr *MockGraphServiceMockRecorder) Todos(ctx any) *MockGraphServiceTodosCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Todos", reflect.TypeOf((*MockGraphService)(nil).Todos), ctx)
	return &MockGraphServiceTodosCall{Call: call}
}

// MockGraphServiceTodosCall wrap *gomock.Call
type MockGraphServiceTodosCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGraphServiceTodosCall) Return(arg0 []*model.Todo, arg1 error) *MockGraphServiceTodosCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGraphServiceTodosCall) Do(f func(context.Context) ([]*model.Todo, error)) *MockGraphServiceTodosCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGraphServiceTodosCall) DoAndReturn(f func(context.Context) ([]*model.Todo, error)) *MockGraphServiceTodosCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// UniqueID mocks base method.
func (m *MockService) UniqueID(ctx context.Context, req *TestReq) (*TestRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueID", ctx, req)
	ret0, _ := ret[0].(*TestRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniqueID indicates an expected call of UniqueID.
func (mr *MockServiceMockRecorder) UniqueID(ctx, req any) *MockServiceUniqueIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueID", reflect.TypeOf((*MockService)(nil).UniqueID), ctx, req)
	return &MockServiceUniqueIDCall{Call: call}
}

// MockServiceUniqueIDCall wrap *gomock.Call
type MockServiceUniqueIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUniqueIDCall) Return(arg0 *TestRes, arg1 error) *MockServiceUniqueIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUniqueIDCall) Do(f func(context.Context, *TestReq) (*TestRes, error)) *MockServiceUniqueIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUniqueIDCall) DoAndReturn(f func(context.Context, *TestReq) (*TestRes, error)) *MockServiceUniqueIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
