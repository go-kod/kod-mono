// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/example/kod_gen_interface.go
//
// Generated by this command:
//
//	mockgen -source internal/app/example/kod_gen_interface.go -destination internal/app/example/kod_gen_mock.go -package example
//

// Package example is a generated GoMock package.
package example

import (
	context "context"
	reflect "reflect"

	model "github.com/go-kod/kod-mono/api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockGraphService is a mock of GraphService interface.
type MockGraphService struct {
	ctrl     *gomock.Controller
	recorder *MockGraphServiceMockRecorder
}

// MockGraphServiceMockRecorder is the mock recorder for MockGraphService.
type MockGraphServiceMockRecorder struct {
	mock *MockGraphService
}

// NewMockGraphService creates a new mock instance.
func NewMockGraphService(ctrl *gomock.Controller) *MockGraphService {
	mock := &MockGraphService{ctrl: ctrl}
	mock.recorder = &MockGraphServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphService) EXPECT() *MockGraphServiceMockRecorder {
	return m.recorder
}

// CreateTodo mocks base method.
func (m *MockGraphService) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTodo", ctx, input)
	ret0, _ := ret[0].(*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTodo indicates an expected call of CreateTodo.
func (mr *MockGraphServiceMockRecorder) CreateTodo(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTodo", reflect.TypeOf((*MockGraphService)(nil).CreateTodo), ctx, input)
}

// Todos mocks base method.
func (m *MockGraphService) Todos(ctx context.Context) ([]*model.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Todos", ctx)
	ret0, _ := ret[0].([]*model.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Todos indicates an expected call of Todos.
func (mr *MockGraphServiceMockRecorder) Todos(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Todos", reflect.TypeOf((*MockGraphService)(nil).Todos), ctx)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// UniqueID mocks base method.
func (m *MockService) UniqueID(ctx context.Context, req *TestReq) (*TestRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueID", ctx, req)
	ret0, _ := ret[0].(*TestRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniqueID indicates an expected call of UniqueID.
func (mr *MockServiceMockRecorder) UniqueID(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueID", reflect.TypeOf((*MockService)(nil).UniqueID), ctx, req)
}
