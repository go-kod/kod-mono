// Code generated by "kod generate". DO NOT EDIT.
//go:build !ignoreKodGen

package redis

import (
	"context"
	"github.com/go-kod/kod"
	"github.com/go-kod/kod/interceptor"
	"reflect"
)

func init() {
	kod.Register(&kod.Registration{
		Name:  "github.com/go-kod/kod-mono/internal/infra/redis/SnowflakeRepository",
		Iface: reflect.TypeOf((*SnowflakeRepository)(nil)).Elem(),
		Impl:  reflect.TypeOf(snowflake{}),
		Refs:  ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return snowflakeRepository_local_stub{
				impl:        info.Impl.(SnowflakeRepository),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
}

// kod.InstanceOf checks.
var _ kod.InstanceOf[SnowflakeRepository] = (*snowflake)(nil)

// Local stub implementations.

type snowflakeRepository_local_stub struct {
	impl        SnowflakeRepository
	name        string
	interceptor kod.Interceptor
}

// Check that snowflakeRepository_local_stub implements the SnowflakeRepository interface.
var _ SnowflakeRepository = (*snowflakeRepository_local_stub)(nil)

func (s snowflakeRepository_local_stub) GetUniqId(ctx context.Context) (r0 int64, err error) {

	if s.interceptor == nil {
		r0, err = s.impl.GetUniqId(ctx)
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		r0, err = s.impl.GetUniqId(ctx)
		res[0] = r0
		return
	}

	info := kod.CallInfo{
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod-mono/internal/infra/redis/SnowflakeRepository.GetUniqId",
		Method:     "GetUniqId",
	}

	err = s.interceptor(ctx, info, []any{}, []any{r0}, call)
	return
}
