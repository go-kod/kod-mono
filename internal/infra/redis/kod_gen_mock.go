// Code generated by MockGen. DO NOT EDIT.
// Source: internal/infra/redis/kod_gen_interface.go
//
// Generated by this command:
//
//	mockgen -source internal/infra/redis/kod_gen_interface.go -destination internal/infra/redis/kod_gen_mock.go -package redis -typed
//

// Package redis is a generated GoMock package.
package redis

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSnowflakeRepository is a mock of SnowflakeRepository interface.
type MockSnowflakeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSnowflakeRepositoryMockRecorder
	isgomock struct{}
}

// MockSnowflakeRepositoryMockRecorder is the mock recorder for MockSnowflakeRepository.
type MockSnowflakeRepositoryMockRecorder struct {
	mock *MockSnowflakeRepository
}

// NewMockSnowflakeRepository creates a new mock instance.
func NewMockSnowflakeRepository(ctrl *gomock.Controller) *MockSnowflakeRepository {
	mock := &MockSnowflakeRepository{ctrl: ctrl}
	mock.recorder = &MockSnowflakeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSnowflakeRepository) EXPECT() *MockSnowflakeRepositoryMockRecorder {
	return m.recorder
}

// GetUniqId mocks base method.
func (m *MockSnowflakeRepository) GetUniqId(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUniqId", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUniqId indicates an expected call of GetUniqId.
func (mr *MockSnowflakeRepositoryMockRecorder) GetUniqId(ctx any) *MockSnowflakeRepositoryGetUniqIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUniqId", reflect.TypeOf((*MockSnowflakeRepository)(nil).GetUniqId), ctx)
	return &MockSnowflakeRepositoryGetUniqIdCall{Call: call}
}

// MockSnowflakeRepositoryGetUniqIdCall wrap *gomock.Call
type MockSnowflakeRepositoryGetUniqIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSnowflakeRepositoryGetUniqIdCall) Return(arg0 int64, arg1 error) *MockSnowflakeRepositoryGetUniqIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSnowflakeRepositoryGetUniqIdCall) Do(f func(context.Context) (int64, error)) *MockSnowflakeRepositoryGetUniqIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSnowflakeRepositoryGetUniqIdCall) DoAndReturn(f func(context.Context) (int64, error)) *MockSnowflakeRepositoryGetUniqIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
