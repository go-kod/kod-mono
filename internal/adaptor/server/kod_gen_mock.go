// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adaptor/server/kod_gen_interface.go
//
// Generated by this command:
//
//	mockgen -source internal/adaptor/server/kod_gen_interface.go -destination internal/adaptor/server/kod_gen_mock.go -package server
//

// Package server is a generated GoMock package.
package server

import (
	context "context"
	reflect "reflect"

	graph "github.com/go-kod/kod-mono/api/graph"
	snowflakev1 "github.com/go-kod/kod-mono/api/grpc/gen/go/snowflake/v1"
	kgin "github.com/go-kod/kod/ext/server/kgin"
	gomock "go.uber.org/mock/gomock"
)

// MockGinController is a mock of GinController interface.
type MockGinController struct {
	ctrl     *gomock.Controller
	recorder *MockGinControllerMockRecorder
}

// MockGinControllerMockRecorder is the mock recorder for MockGinController.
type MockGinControllerMockRecorder struct {
	mock *MockGinController
}

// NewMockGinController creates a new mock instance.
func NewMockGinController(ctrl *gomock.Controller) *MockGinController {
	mock := &MockGinController{ctrl: ctrl}
	mock.recorder = &MockGinControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGinController) EXPECT() *MockGinControllerMockRecorder {
	return m.recorder
}

// UniqueID mocks base method.
func (m *MockGinController) UniqueID(ctx *kgin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UniqueID", ctx)
}

// UniqueID indicates an expected call of UniqueID.
func (mr *MockGinControllerMockRecorder) UniqueID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueID", reflect.TypeOf((*MockGinController)(nil).UniqueID), ctx)
}

// MockGraphController is a mock of GraphController interface.
type MockGraphController struct {
	ctrl     *gomock.Controller
	recorder *MockGraphControllerMockRecorder
}

// MockGraphControllerMockRecorder is the mock recorder for MockGraphController.
type MockGraphControllerMockRecorder struct {
	mock *MockGraphController
}

// NewMockGraphController creates a new mock instance.
func NewMockGraphController(ctrl *gomock.Controller) *MockGraphController {
	mock := &MockGraphController{ctrl: ctrl}
	mock.recorder = &MockGraphControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphController) EXPECT() *MockGraphControllerMockRecorder {
	return m.recorder
}

// Mutation mocks base method.
func (m *MockGraphController) Mutation() graph.MutationResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mutation")
	ret0, _ := ret[0].(graph.MutationResolver)
	return ret0
}

// Mutation indicates an expected call of Mutation.
func (mr *MockGraphControllerMockRecorder) Mutation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutation", reflect.TypeOf((*MockGraphController)(nil).Mutation))
}

// Query mocks base method.
func (m *MockGraphController) Query() graph.QueryResolver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query")
	ret0, _ := ret[0].(graph.QueryResolver)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockGraphControllerMockRecorder) Query() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockGraphController)(nil).Query))
}

// MockGrpcController is a mock of GrpcController interface.
type MockGrpcController struct {
	ctrl     *gomock.Controller
	recorder *MockGrpcControllerMockRecorder
}

// MockGrpcControllerMockRecorder is the mock recorder for MockGrpcController.
type MockGrpcControllerMockRecorder struct {
	mock *MockGrpcController
}

// NewMockGrpcController creates a new mock instance.
func NewMockGrpcController(ctrl *gomock.Controller) *MockGrpcController {
	mock := &MockGrpcController{ctrl: ctrl}
	mock.recorder = &MockGrpcControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrpcController) EXPECT() *MockGrpcControllerMockRecorder {
	return m.recorder
}

// UniqueId mocks base method.
func (m *MockGrpcController) UniqueId(ctx context.Context, req *snowflakev1.UniqueIdRequest) (*snowflakev1.UniqueIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueId", ctx, req)
	ret0, _ := ret[0].(*snowflakev1.UniqueIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UniqueId indicates an expected call of UniqueId.
func (mr *MockGrpcControllerMockRecorder) UniqueId(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueId", reflect.TypeOf((*MockGrpcController)(nil).UniqueId), ctx, req)
}
