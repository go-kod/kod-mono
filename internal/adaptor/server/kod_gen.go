// Code generated by "kod generate". DO NOT EDIT.
//go:build !ignoreKodGen

package server

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/go-kod/kod"
	"github.com/go-kod/kod/interceptor"
	"reflect"
)

func init() {
	kod.Register(&kod.Registration{
		Name:      "github.com/go-kod/kod-mono/internal/adaptor/server/Controller",
		Interface: reflect.TypeOf((*Controller)(nil)).Elem(),
		Impl:      reflect.TypeOf(controller{}),
		Refs:      `⟦fe3cc00c:KoDeDgE:github.com/go-kod/kod-mono/internal/adaptor/server/Controller→github.com/go-kod/kod-mono/internal/app/example/Service⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return controller_local_stub{
				impl:        info.Impl.(Controller),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/go-kod/kod/Main",
		Interface: reflect.TypeOf((*kod.Main)(nil)).Elem(),
		Impl:      reflect.TypeOf(Server{}),
		Refs:      `⟦120e190c:KoDeDgE:github.com/go-kod/kod/Main→github.com/go-kod/kod-mono/internal/adaptor/server/Controller⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return main_local_stub{
				impl:        info.Impl.(kod.Main),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
}

// kod.InstanceOf checks.
var _ kod.InstanceOf[Controller] = (*controller)(nil)
var _ kod.InstanceOf[kod.Main] = (*Server)(nil)

// Local stub implementations.

type controller_local_stub struct {
	impl        Controller
	name        string
	interceptor interceptor.Interceptor
}

// Check that controller_local_stub implements the Controller interface.
var _ Controller = (*controller_local_stub)(nil)

func (s controller_local_stub) UniqueID(a0 *gin.Context) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	s.impl.UniqueID(a0)
	return
}

type main_local_stub struct {
	impl        kod.Main
	name        string
	interceptor interceptor.Interceptor
}

// Check that main_local_stub implements the kod.Main interface.
var _ kod.Main = (*main_local_stub)(nil)

