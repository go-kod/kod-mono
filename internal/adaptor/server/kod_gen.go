// Code generated by "kod generate". DO NOT EDIT.
//go:build !ignoreKodGen

package server

import (
	"context"
	"github.com/go-kod/kod"
	"github.com/go-kod/kod-ext/server/kgin"
	"github.com/go-kod/kod-mono/api/graph"
	"github.com/go-kod/kod-mono/api/grpc/gen/go/snowflake/v1"
	"github.com/go-kod/kod/interceptor"
	"reflect"
)

// Full method names for components.
const (
	// GinController is the full name of the component [github.com/go-kod/kod-mono/internal/adaptor/server/GinController].
	GinController_ComponentName = "github.com/go-kod/kod-mono/internal/adaptor/server/GinController"
	// GraphController is the full name of the component [github.com/go-kod/kod-mono/internal/adaptor/server/GraphController].
	GraphController_ComponentName = "github.com/go-kod/kod-mono/internal/adaptor/server/GraphController"
	// GrpcController is the full name of the component [github.com/go-kod/kod-mono/internal/adaptor/server/GrpcController].
	GrpcController_ComponentName = "github.com/go-kod/kod-mono/internal/adaptor/server/GrpcController"
	// GrpcController_UniqueId_FullMethodName is the full name of the method [grpcImpl.UniqueId].
	GrpcController_UniqueId_FullMethodName = "github.com/go-kod/kod-mono/internal/adaptor/server/GrpcController.UniqueId"
)

func init() {
	kod.Register(&kod.Registration{
		Name:      "github.com/go-kod/kod-mono/internal/adaptor/server/GinController",
		Interface: reflect.TypeOf((*GinController)(nil)).Elem(),
		Impl:      reflect.TypeOf(ginImpl{}),
		Refs:      `⟦039ecf94:KoDeDgE:github.com/go-kod/kod-mono/internal/adaptor/server/GinController→github.com/go-kod/kod-mono/internal/app/example/Service⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			return ginController_local_stub{
				impl:        info.Impl.(GinController),
				interceptor: info.Interceptor,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/go-kod/kod-mono/internal/adaptor/server/GraphController",
		Interface: reflect.TypeOf((*GraphController)(nil)).Elem(),
		Impl:      reflect.TypeOf(resolver{}),
		Refs:      `⟦35bf9cd5:KoDeDgE:github.com/go-kod/kod-mono/internal/adaptor/server/GraphController→github.com/go-kod/kod-mono/internal/app/example/GraphService⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			return graphController_local_stub{
				impl:        info.Impl.(GraphController),
				interceptor: info.Interceptor,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/go-kod/kod-mono/internal/adaptor/server/GrpcController",
		Interface: reflect.TypeOf((*GrpcController)(nil)).Elem(),
		Impl:      reflect.TypeOf(grpcImpl{}),
		Refs:      `⟦74eadafa:KoDeDgE:github.com/go-kod/kod-mono/internal/adaptor/server/GrpcController→github.com/go-kod/kod-mono/internal/domain/snowflake/Service⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			return grpcController_local_stub{
				impl:        info.Impl.(GrpcController),
				interceptor: info.Interceptor,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:      "github.com/go-kod/kod/Main",
		Interface: reflect.TypeOf((*kod.Main)(nil)).Elem(),
		Impl:      reflect.TypeOf(Server{}),
		Refs: `⟦3b277b6c:KoDeDgE:github.com/go-kod/kod/Main→github.com/go-kod/kod-mono/internal/adaptor/server/GinController⟧,
⟦8b746b0c:KoDeDgE:github.com/go-kod/kod/Main→github.com/go-kod/kod-mono/internal/adaptor/server/GrpcController⟧,
⟦88b98bfb:KoDeDgE:github.com/go-kod/kod/Main→github.com/go-kod/kod-mono/internal/adaptor/server/GraphController⟧`,
		LocalStubFn: nil,
	})
}

// CodeGen version check.
var _ kod.CodeGenLatestVersion = kod.CodeGenVersion[[0][1]struct{}](`
ERROR: You generated this file with 'kod generate' (codegen
version v0.1.0). The generated code is incompatible with the version of the
github.com/go-kod/kod module that you're using. The kod module
version can be found in your go.mod file or by running the following command.

    go list -m github.com/go-kod/kod

We recommend updating the kod module and the 'kod generate' command by
running the following.

    go get github.com/go-kod/kod@latest
    go install github.com/go-kod/kod/cmd/kod@latest

Then, re-run 'kod generate' and re-build your code. If the problem persists,
please file an issue at https://github.com/go-kod/kod/issues.
`)

// kod.InstanceOf checks.
var _ kod.InstanceOf[GinController] = (*ginImpl)(nil)
var _ kod.InstanceOf[GraphController] = (*resolver)(nil)
var _ kod.InstanceOf[GrpcController] = (*grpcImpl)(nil)
var _ kod.InstanceOf[kod.Main] = (*Server)(nil)

// Local stub implementations.
// ginController_local_stub is a local stub implementation of [GinController].
type ginController_local_stub struct {
	impl        GinController
	interceptor interceptor.Interceptor
}

// Check that [ginController_local_stub] implements the [GinController] interface.
var _ GinController = (*ginController_local_stub)(nil)

// UniqueID wraps the method [ginImpl.UniqueID].
func (s ginController_local_stub) UniqueID(a0 *kgin.Context) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	s.impl.UniqueID(a0)
	return
}

// graphController_local_stub is a local stub implementation of [GraphController].
type graphController_local_stub struct {
	impl        GraphController
	interceptor interceptor.Interceptor
}

// Check that [graphController_local_stub] implements the [GraphController] interface.
var _ GraphController = (*graphController_local_stub)(nil)

// Mutation wraps the method [resolver.Mutation].
func (s graphController_local_stub) Mutation() (r0 graph.MutationResolver) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.Mutation()
	return
}

// Query wraps the method [resolver.Query].
func (s graphController_local_stub) Query() (r0 graph.QueryResolver) {
	// Because the first argument is not context.Context, so interceptors are not supported.
	r0 = s.impl.Query()
	return
}

// grpcController_local_stub is a local stub implementation of [GrpcController].
type grpcController_local_stub struct {
	impl        GrpcController
	interceptor interceptor.Interceptor
}

// Check that [grpcController_local_stub] implements the [GrpcController] interface.
var _ GrpcController = (*grpcController_local_stub)(nil)

// UniqueId wraps the method [grpcImpl.UniqueId].
func (s grpcController_local_stub) UniqueId(ctx context.Context, a1 *snowflakev1.UniqueIdRequest) (r0 *snowflakev1.UniqueIdResponse, err error) {

	if s.interceptor == nil {
		r0, err = s.impl.UniqueId(ctx, a1)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		r0, err = s.impl.UniqueId(ctx, a1)
		res[0] = r0
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		FullMethod: GrpcController_UniqueId_FullMethodName,
	}

	err = s.interceptor(ctx, info, []any{a1}, []any{r0}, call)
	return
}
