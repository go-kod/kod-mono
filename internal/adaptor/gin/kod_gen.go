// Code generated by "kod generate". DO NOT EDIT.
//go:build !ignoreKodGen

package gin

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/go-kod/kod"
	"github.com/go-kod/kod/core/interceptor"
	"reflect"
)

func init() {
	kod.Register(kod.Registration{
		Name:  "github.com/go-kod/kod-mono/internal/adaptor/gin/Controller",
		Iface: reflect.TypeOf((*Controller)(nil)).Elem(),
		Impl:  reflect.TypeOf(controller{}),
		Refs:  `⟦7700b07a:KoDeDgE:github.com/go-kod/kod-mono/internal/adaptor/gin/Controller→github.com/go-kod/kod-mono/internal/app/example/Service⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return controller_local_stub{
				impl:        info.Impl.(Controller),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
				caller:      info.Caller,
			}
		},
	})
}

// kod.InstanceOf checks.
var _ kod.InstanceOf[Controller] = (*controller)(nil)

// Local stub implementations.

type controller_local_stub struct {
	impl        Controller
	name        string
	caller      string
	interceptor kod.Interceptor
}

// Check that controller_local_stub implements the Controller interface.
var _ Controller = (*controller_local_stub)(nil)

func (s controller_local_stub) UniqueID(a0 *gin.Context) {
	var err error
	ctx := a0.Request.Context()
	info := kod.CallInfo{
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod-mono/internal/adaptor/gin/Controller.UniqueID",
		Caller:     s.caller,
	}

	if s.interceptor == nil {
		s.impl.UniqueID(a0)
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		a0.Request = a0.Request.WithContext(ctx)
		s.impl.UniqueID(a0)

		return
	}

	err = s.interceptor(ctx, info, []any{a0}, []any{}, call)
	if err != nil {
		a0.Error(err)
	}
}
